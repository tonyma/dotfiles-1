" Setup encodings {{{
set encoding=utf-8
scriptencoding utf-8
" }}}

" Setup XDG_HOME {{{
if ($XDG_CONFIG_HOME ==# '')
  let $XDG_CONFIG_HOME=$HOME.'/.config'
endif
if $XDG_CONFIG_HOME =~ '/$'
  let $XDG_CONFIG_HOME = strpart($XDG_CONFIG_HOME, 0, strlen($XDG_CONFIG_HOME)-1)
endif
if ($XDG_CACHE_HOME ==# '')
  let $XDG_CACHE_HOME=$HOME.'/.cache'
endif

set undodir=$XDG_CACHE_HOME/vim/undo
set directory=$XDG_CACHE_HOME/vim/swap
set backupdir=$XDG_CACHE_HOME/vim/backup
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
" }}}

" Setup Environment Variables {{{
" ZSHとVIM両方に効かせる環境変数はここで設定する
" ZSHだけでいい場合は.zshenvで設定すればよい

" 基本環境設定:
let $LANG='ja_JP.UTF-8'
let $ARCHFLAGS='-arch x86_64'
let $EDITOR='vim'
let $COLORTERM='xterm-256color'
let $TERM='xterm-256color'

" Path環境変数の設定:

let $PATH='.:' .
      \ $HOME . '/.local/bin:'  .
      \ $HOME . '/.local/sbin:' .
      \ '/usr/local/bin:'       .
      \ '/usr/local/sbin:'      .
      \ $PATH .
      \ ':/bin' .
      \ ':/usr/bin' .
      \ ':/sbin' .
      \ ':/usr/sbin'

" Zsh:
let $ZDOTDIR=$HOME.'/.config/zsh'

" Go:
let $GOPATH=$HOME.'/go'
let $PATH=$PATH.':/usr/local/go/bin:'.$HOME.'/go/bin'

" Generator-go-project:
let $GO_PROJECT_ROOT=$HOME.'/Projects'

" Python: (support sqlite3 and mysql library (used by mypy, etc...))
let $LDFLAGS="-L/usr/local/opt/zlib/lib -L/usr/local/opt/sqlite/lib"
let $CPPFLAGS="-I/usr/local/opt/zlib/include -I/usr/local/opt/sqlite/include"
let $LIBRARY_PATH=$LIBRARY_PATH.':/usr/local/opt/openssl/lib/'

" Ruby:
let $PATH=$HOME.'/.rbenv/bin:'.$HOME.'/.rbenv/shims:'.$PATH

" Python:
if has("mac")
  let $PYTHON_CONFIGURE_OPTS='--enable-framework'
  let $PIP_REQUIRE_VIRTUALENV='true'
endif
let $PYENV_DEFAULT_PACKAGES=$XDG_CONFIG_HOME.'/pyenv/default-packages'
let $PYENV_ROOT=$HOME.'/.pyenv'
let $PATH=$PYENV_ROOT.'/bin:'.$PYENV_ROOT.'/shims:'.$PATH

" Node:
let $PATH=$PATH.':'.$HOME.'/.nodenv/shims:'.$HOME.'/.nodenv/bin'

" GNU commands:
let $PATH='/usr/local/opt/gzip/bin:'.$PATH
let $PATH='/usr/local/opt/openssl/bin:'.$PATH

" FZF (https://github.com/junegunn/fzf):
let $FZF_DEFAULT_OPTS='--inline-info --no-mouse --extended --ansi --no-sort'
let $FZF_DEFAULT_COMMAND='rg --files --hidden --follow --maxdepth 10 --glob "!.git/*" --glob "!*.egg-info/*" --glob "!*/__pycache__/*" --glob "!.mypy_cache/*"'
let $PATH=$PATH.':'.$HOME.'/.fzf/bin'

" Scala:
let $SCALA_HOME='/usr/local/bin/scala'
let $PATH=$PATH.':'.$SCALA_HOME.'/bin'

" Yarn:
let $PATH=$PATH.':'.$HOME.'/.yarn/bin'

" Perl:
let $PATH=$PATH.':'.$HOME.'/perl5/bin'

" Gigamoji:
let $GIGAMOJI_BG=':space:'

" Gordon:
let $PATH=$PATH.':'.$HOME.'/Project/bin'

" dotfiles自体
let $DOTFILES=$HOME.'/.config'
let $DOTS=$DOTFILES

silent! ru ./secret.vim

" }}}

" Setup XDG Home directory paths. {{{
let g:xdg_config_home=$XDG_CONFIG_HOME
if g:xdg_config_home ==# ''
  let g:xdg_config_home = $HOME.'/.config'
endif

let g:xdg_data_home=$XDG_DATA_HOME
if g:xdg_data_home ==# ''
  let g:xdg_data_home = $HOME.'/.local/share'
endif

let s:cachedir=$XDG_CACHE_HOME
if s:cachedir ==# ''
  let s:cachedir = $HOME.'/.cache'
endif

let &directory = s:cachedir.'/vim/swap'
if !isdirectory(&directory)
  call mkdir(&directory, 'p')
endif
let &backupdir = s:cachedir.'/vim/backup'
if !isdirectory(&backupdir)
  call mkdir(&backupdir, 'p')
endif
" }}}

" Configure Plugins {{{
" Begin with mkdir {{{
let s:plug = {}
let s:plug['before'] = {}
let s:plug['after'] = {}
function! s:plug.begin()
  let l:dir = g:xdg_data_home . '/vim-plug'
  if !isdirectory(l:dir)
    call mkdir(l:dir, 'p')
  endif
  call plug#begin(l:dir)
endfunction

function! s:plug.end()
  for l:name in keys(s:plug.before)
    call s:plug.before[l:name]()
  endfor
  call plug#end()
  for l:name in keys(s:plug.after)
    call s:plug.after[l:name]()
  endfor
endfunction
" }}}

call s:plug.begin()
  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/vim-lsp'
  function! s:plug.after.vim__lsp()
  "  let g:lsp_async_completion = 1
    let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

    " 保存時に自動でフォーマット {{{

    let g:kyoh86_auto_format = v:true

    function! s:autoFormatSync()
      if g:kyoh86_auto_format
        LspDocumentFormatSync
      endif
    endfunction

    function! s:goAutoFormatSync()
      if g:kyoh86_auto_format
        LspCodeAction source.organizeImports
        LspDocumentFormatSync
      endif
    endfunction

    augroup Lsp.format
      autocmd!
      autocmd BufWritePre *.py call s:autoFormatSync()
      autocmd BufWritePre *.go call s:goAutoFormatSync()
    augroup END

    " }}}

    nmap <Leader>ld <Plug>(lsp-definition)
    nmap <Leader>lh <Plug>(lsp-hover)
    nmap <Leader>ln <Plug>(lsp-next-error)
    nmap <Leader>lp <Plug>(lsp-previous-error)
    nmap <Leader>lr <Plug>(lsp-rename)
    nmap <Leader>lf <Plug>(lsp-document-format)
    nmap <Leader>la <Plug>(lsp-code-action)
    nmap <Leader>ll <Plug>(lsp-document-diagnostics)
    nmap <Leader>ls <Plug>(lsp-status)

    " nmap <Leader> <Plug>(lsp-references)
    " nmap <Leader> <Plug>(lsp-declaration)
    " nmap <Leader> <Plug>(lsp-document-symbol)
    " nmap <Leader> <Plug>(lsp-workspace-symbol)
    " nmap <Leader> <Plug>(lsp-implementation)
    " nmap <Leader> <Plug>(lsp-type-definition)

    autocmd FileType go,python,typescript,vim,markdown,sh setlocal omnifunc=lsp#complete

  endfunction

  Plug 'mattn/vim-lsp-settings'
  " {{{ function! s:plug.after.mattn__vim__lsp__settings()
    " for python
    let g:lsp_settings = {}
    let g:lsp_settings['pyls'] =
          \ {
          \   'workspace_config': {'pyls': {
          \     'configurationSources': ['flake8'],
          \     'plugins': {
          \       'black': {'enabled': v:true},
          \       'pycodestyle': {'enabled': v:false},
          \       'pyls_mypy': {'enabled': v:true, 'live_mode': v:false},
          \     }
          \   }}
          \ }
    " for viml
    let g:lsp_settings['efm-langserver'] = 
          \ {
          \   'disabled': v:false
          \ }
    let g:lsp_settings['vim-language-server'] = 
          \ {
          \   'workspace_config': {
          \     "iskeyword": "vim iskeyword option",
          \     "diagnostic": {
          \       "enable": v:true
          \     }
          \   }
          \ }
  " endfunction }}}

  Plug 'itchyny/lightline.vim'
  function! s:plug.after.itchyny__lightline__vim() "
    let g:lightline = {
      \   'colorscheme': 'momiji',
      \   'separator': {
      \     'left': "",
      \     'right': ""
      \   },
      \   'subseparator': {
      \     'left': "\UFFE8",
      \     'right': "\UFFE8"
      \   },
      \   'active': {
      \     'left': [
      \       [ 'mode', 'paste' ],
      \       [ 'pwd', 'gitstatus', 'relativepath', 'readonly', 'modified', 'terminalinfo' ]
      \     ],
      \     'right': [
      \       [ 'linter_ok', 'linter_errors', 'linter_warnings' ],
      \       [ 'fileformat', 'fileencoding', 'filetype', 'lineinfo' ]
      \     ]
      \   },
      \   'inactive': {
      \     'left': [
      \       [ 'mode', 'paste' ],
      \       [ 'relativepath', 'readonly', 'modified' ]
      \     ],
      \     'right': [
      \       [ 'filetype' ]
      \     ]
      \   },
      \   'mode_map': {
      \     'n': "\UFFB32", 'i': "\UFFAE6", 'R': "\UFF954", 'v': 'VIS', 'V': 'VLNE', "\<C-v>": 'VBLK',
      \     'c': 'COMM', 's': 'SLCT', 'S': 'SLNE', "\<C-s>": 'SBLK', 't': "\UF120"
      \   },
      \   'component_expand': {
      \     'linter_ok': 'LightlineLspOK',
      \     'linter_warnings': 'LightlineLspWarnings',
      \     'linter_errors': 'LightlineLspErrors',
      \     'gitstatus': 'LightlineGitStatus'
      \   },
      \   'component_type': {
      \     'linter_warnings': 'warning',
      \     'gitstatus': 'warning',
      \     'linter_errors': 'error',
      \   },
      \   'component_function': {
      \     'pwd': 'LightlinePwd',
      \     'percent': 'LightlinePercent',
      \     'fileformat': 'LightlineDevFileformat',
      \     'fileencoding': 'LightlineFileEncoding',
      \     'filetype': 'LightlineDevFiletype',
      \     'terminalinfo': 'LightlineTerminalInfo',
      \     'readonly': 'LightlineReadonly', 
      \     'relativepath': 'LightlineRelativePath',
      \     'filename': 'LightlineFilename',
      \     'gitgutter': 'LightlineGitGutter',
      \     'lineinfo': 'LightlineLineInfo',
      \     'modified': 'LightlineModified'
      \   },
      \ }
    augroup LightLineUpdate
      autocmd!
      autocmd DirChanged * call lightline#update()
    augroup END
    function! LightlinePwd() abort
      return fnamemodify(getcwd(), ':t')
    endfunction
    function! LightlinePercent() abort
      let l:last = line('$')
      let l:cur = line('.')
      return &buftype ==# 'terminal' ? '' : printf('%3d%% of %d', l:cur * 100 / l:last, l:last)
    endfunction
    function! LightlineDevFiletype()
      return &buftype ==# 'terminal' ? '' : strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft'
    endfunction

    function! LightlineDevFileformat()
      return &buftype ==# 'terminal' ? '' : (&fileformat ==# 'unix' ? '' : &fileformat . ' ' . WebDevIconsGetFileFormatSymbol())
    endfunction

    function! LightlineModified() abort
      return &buftype ==# 'terminal' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction
    function! LightlineFileEncoding() abort
      let l:enc = &fileencoding !=# '' ? &fileencoding : &encoding
      return &buftype ==# 'terminal' ? '' : (l:enc ==# 'utf-8' ? '' : l:enc)
    endfunction
    function! LightlineLineInfo() abort
      return &buftype ==# 'terminal' ? '' : "\ue0a1".line('.').':'.printf('%03d', col('.'))
    endfunction
    function! LightlineTerminalInfo() abort
      if &buftype !=# 'terminal'
        return ''
      endif
      let l:ttl=term_gettitle('%')
      let l:rel=fnamemodify(l:ttl, ':p:.')
      if l:rel ==# ''
        let l:rel='.'
      elseif l:rel[0] !=# '/'
        let l:rel='./'.l:rel
      endif
      return bufnr('%').':'.l:rel
    endfunction
    function! LightlineRelativePath() abort
      if expand('%') ==# ''
        let l:name = '[No Name]'
      else
        let l:max = winwidth(0) - 80
        let l:name = expand('%:t')
        if len(l:name) < l:max
          let l:name = expand('%:.')
          if l:name ==# ''
            let l:name = '.'
          elseif l:name[0] !=# '/'
            let l:name='./'.l:name
          endif

          if len(l:name) > l:max
            let l:name = '…' . l:name[-l:max :]
          endif
        endif
      endif

      return &buftype ==# 'terminal' ? '' : bufnr('%') . ':' . l:name
    endfunction
    function! LightlineFilename() abort
      return &buftype ==# 'terminal' ? '' : bufnr('%') . ':' . (expand('%:t') !=# '' ? expand('%:t') : '[No Name]')
    endfunction
    function! LightlineReadonly() abort
      return &buftype ==# 'terminal' ? '' : &readonly ? "\ue0a2" : ''
    endfunction
    function! LightlineGitStatus()
      let l:brch = ''
      let l:warn = ''
      let l:location = getcwd()
      if &buftype ==# 'terminal'
        let l:location = term_gettitle('%')
      endif

      let l:stat = s:getGitStatus(l:location)
      let l:commit = trim(s:statPart(l:stat, 'ahead', " \UFF55D") . s:statPart(l:stat, 'behind', " \UFF545") . get(l:stat, 'sync', ""))
      let l:merge = s:statPart(l:stat, 'unmerged', 'Unmerged:')
      let l:stage = trim(s:statPart(l:stat, 'staged', " \UFF631") . s:statPart(l:stat, 'unstaged', " \UFF915") . s:statPart(l:stat, 'untracked', " \UFFC89"))
      let l:warn = [ l:commit, l:merge, l:stage ]
      let l:brch = trim(s:statPart(l:stat, 'local-branch', "\UE0A0"))
      return [ [ l:brch ], l:warn, [] ]
    endfunction

    function! LightlineGitGutter()
      if ! exists('*GitGutterGetHunkSummary')
            \ || ! get(g:, 'gitgutter_enabled', 0)
            \ || winwidth('.') <= 90
        return ''
      endif
      let l:symbols = [
            \ g:gitgutter_sign_added . ' ',
            \ g:gitgutter_sign_modified . ' ',
            \ g:gitgutter_sign_removed . ' '
            \ ]
      let l:hunks = GitGutterGetHunkSummary()
      let l:ret = []
      for i in [0, 1, 2]
        if l:hunks[i] > 0
          call add(l:ret, l:symbols[i] . l:hunks[i])
        endif
      endfor
      return join(l:ret, ' ')
    endfunction

    function! s:statPart(stat, key, pre)
      if !has_key(a:stat, a:key) || a:stat[a:key] ==# ''
        return ''
      endif
      return a:pre . a:stat[a:key]
    endfunction
    function! s:getGitStatus(path)
      let l:info = {}
      let l:res = system("git -C '" . a:path . "' status --porcelain --branch --untracked-files --ahead-behind --renames")
      if l:res[0:6] ==# 'fatal: '
        return l:info
      endif
      for l:file in split(l:res, "\n")
        if l:file[0:1] ==# '##'
          " ブランチ名を取得する
          let l:words = split(l:file, '\.\.\.\|[ \[\],]')[1:]
          if len(l:words) == 1
            let l:info['local-branch'] = l:words[0] . '?'
            let l:info['sync'] = "\uf12a"
          else
            let [l:info['local-branch'], l:info['remote-branch']; l:remain] = l:words
            let l:key = ''
            for l:_ in l:remain
              if l:key !=# ''
                let l:info[l:key] = l:_
                let l:key = ''
              else
                let l:key = l:_
              endif
            endfor
          endif
        elseif l:file[0] ==# 'U' || l:file[1] ==# 'U' || l:file[0:1] ==# 'AA' || l:file[0:1] ==# 'DD'
          call s:inc(l:info, 'unmerged')
        elseif l:file[0:1] ==# '??'
          call s:inc(l:info, 'untracked')
        else
          if l:file[0] !=# ' '
            call s:inc(l:info, 'staged')
          endif
          if l:file[1] !=# ' '
            call s:inc(l:info, 'unstaged')
          endif
        endif
      endfor
      return l:info
    endfunction
    function! s:inc(info, key)
      let a:info[a:key] = get(a:info, a:key, 0) + 1
    endfunction
    set laststatus=2  " statuslineは常に表示
    set noshowmode  " lightlineで表示するので、vim標準のモード表示は隠す
    function! LightlineLspOK() abort
      if &buftype ==# 'terminal'
        return ''
      endif
      let l:counts = lsp#get_buffer_diagnostics_counts()    " *vim-lsp-get_buffer_diagnostics_counts*
      if l:counts['error'] == 0 && l:counts['warning'] == 0
        return 'OK'
      endif
      return ''
    endfunction
    function! LightlineLspWarnings() abort
      if &buftype ==# 'terminal'
        return ''
      endif
      let l:counts = lsp#get_buffer_diagnostics_counts()    " *vim-lsp-get_buffer_diagnostics_counts*
      if l:counts['warning'] == 0
        return ''
      endif
      return 'W:' . l:counts['warning']
    endfunction
    function! LightlineLspErrors() abort
      if &buftype ==# 'terminal'
        return ''
      endif
      let l:counts = lsp#get_buffer_diagnostics_counts()    " *vim-lsp-get_buffer_diagnostics_counts*
      if l:counts['error'] == 0
        return ''
      endif
      return 'E:' . l:counts['error']
    endfunction
  endfunction

  Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
  function! s:plug.after.plasticboy__vim__markdown()
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_fenced_languages = ['c++=cpp', 'viml=vim', 'bash=sh', 'ini=dosini', 'uml=plantuml']
    let g:vim_markdown_math = 1
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_toml_frontmatter = 1
    let g:vim_markdown_json_frontmatter = 1
    let g:vim_markdown_conceal = 0
    let g:tex_conceal = ''
  endfunction

  Plug 'jremmen/vim-ripgrep', {'on': ['Rg', 'RgRoot']}
  function! s:plug.after.jremmen__vim__ripgrep()
    let g:rg_command = 'rg --vimgrep'
  endfunction

  Plug 'lambdalisue/vim-pyenv', {'for': 'python'}
  Plug 'jmcantrell/vim-virtualenv', {'for': 'python'}
  function! s:plug.after.jmcantrell__vim__virtualenv()
    function! s:jedi_auto_force_py_version() abort
      let g:jedi#force_py_version = pyenv#python#get_internal_major_version()
    endfunction
    augroup vim-pyenv-custom-augroup
      autocmd! *
      autocmd User vim-pyenv-activate-post   call s:jedi_auto_force_py_version()
      autocmd User vim-pyenv-deactivate-post call s:jedi_auto_force_py_version()
    augroup END
  endfunction
  Plug 'aklt/plantuml-syntax', {'for': 'plantuml'}
  function! s:plug.after.aklt__plantuml__syntax()
    augroup PlantUMLCmd
      autocmd FileType plantuml command! OpenUml :!open -a "Google Chrome" %
    augroup END
  endfunction
  Plug 'elzr/vim-json', {'for': 'json'}
  function! s:plug.after.elzr__vim__json()
    let g:vim_json_syntax_conceal = 0
  endfunction
  Plug 'qpkorr/vim-bufkill'
  function! s:plug.after.qpkorr__vim__bufkill()
    let g:BufKillCreateMappings = 0
  endfunction
  Plug 'arp242/gopher.vim'
  function! s:plug.after.arp242__gopher__vim()
    let g:gopher_map = {
        \ '_default':      1,
        \ '_imap_prefix': '<C-g>'
        \ }
  endfunction
  Plug 'thinca/vim-quickrun', {'on': 'QuickRun'}
  function! s:plug.after.thinca__vim__quickrun()
    let g:quickrun_config = {
        \ '_': {
        \   'runner': 'terminal'
        \   }
        \ }
  endfunction
  Plug 'osyo-manga/vim-operator-jump_side'
  function! s:plug.after.osyo__manga__vim__operator__jump_side()
    " textobj の先頭へ移動する
    nmap <Leader>h <Plug>(operator-jump-head)
    " textobj の末尾へ移動する
    nmap <Leader>t <Plug>(operator-jump-tail)
  endfunction
  Plug 'simeji/winresizer'
  function! s:plug.before.osyo__manga__vim__operator__jump_side()
    let g:winresizer_start_key = '<C-W><C-E>'
  endfunction
  Plug 'machakann/vim-sandwich'  " Edit surrounders (like brackets, parentheses and quotes)
  function! s:plug.after.machakann__vim__sandwich()
    nnoremap s <Nop>   " ignore s instead of the cl
    xnoremap s <Nop>   " ignore s instead of the cl
    silent! nmap <unique><silent> sc <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    silent! nmap <unique><silent> scb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  endfunction

  Plug 'po3rin/vim-gofmtmd'
  Plug 'AndrewRadev/linediff.vim'
  Plug 'Glench/Vim-Jinja2-Syntax', {'for': 'jinja'}
  Plug 'bps/vim-textobj-python'
  Plug 'briancollins/vim-jst', {'for': 'jst'}
  Plug 'cespare/vim-toml', {'for': 'toml'}
  Plug 'dhruvasagar/vim-table-mode'
  Plug 'airblade/vim-gitgutter'
  Plug 'iberianpig/tig-explorer.vim'
  Plug 'jez/vim-github-hub', {'for': 'ghhub'}
  " Plug 'justinmk/vim-dirvish'
  " Plug 'kristijanhusak/vim-dirvish-git'
  Plug 'lambdalisue/fern.vim'
  function! s:hijack_directory() abort
    let l:target=expand('%')
    if !isdirectory(l:target) || &ft == 'fern'
      return
    endif
    bwipeout %
    execute 'Fern ' . l:target
  endfunction
  function! s:init_fern() abort
    setlocal bufhidden=wipe
    setlocal nobuflisted
  endfunction
  function! s:plug.after.lambdalisue__fern()
    " hijack netrw
    let g:loaded_netrw             = 1
    let g:loaded_netrwPlugin       = 1
    let g:loaded_netrwSettings     = 1
    let g:loaded_netrwFileHandlers = 1

    nnoremap - :<C-u>Fern %:h<CR>

    augroup my-fern-hijack
      autocmd!
      autocmd BufEnter * ++nested call s:hijack_directory()
      " autocmd FileType fern call s:init_fern()
    augroup END

    nnoremap - :<C-u>Fern %:h<CR>
  endfunction
  Plug 'kana/vim-metarw'
  Plug 'kana/vim-operator-user'
  Plug 'kana/vim-textobj-entire'
  Plug 'kana/vim-textobj-user'
  Plug 'previm/previm'
  Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
  Plug 'machakann/vim-swap'
  Plug 'pangloss/vim-javascript', {'for': 'javascript'}
  Plug 'posva/vim-vue'
  Plug 'robertbasic/vim-hugo-helper'
  Plug 'ryanoasis/vim-devicons'
  Plug 'sgur/vim-textobj-parameter'
  Plug 'stefandtw/quickfix-reflector.vim'
  Plug 'tell-k/vim-autoflake', {'for': 'python'}
  Plug 'tpope/vim-dispatch'
  Plug 'tyru/capture.vim', {'on': 'Capture'}  " Show Ex command output in a buffer
  Plug 'tyru/open-browser-github.vim'
  Plug 'tyru/open-browser.vim'
  Plug 'vim-jp/vim-vimlparser'
  Plug 'vim-jp/vimdoc-ja'
  Plug 'vim-jp/vital.vim', {'on': 'Vitalize'}
  Plug 'vim-scripts/sudo.vim'

if executable('direnv')
  Plug 'direnv/direnv.vim'
endif

  " My Plugins {{{
  " {{{ kyoh86/vim-gogh
  Plug 'kyoh86/vim-gogh', {'dir': $GO_PROJECT_ROOT.'/github.com/kyoh86/vim-gogh'}
  function! s:plug.after.kyoh86__vim__gogh()
    nmap <Leader>ge <Plug>(gogh-edit-project)
    nmap <Leader>gp <Plug>(gogh-switch-project)
    nmap <Leader>gg <Plug>(gogh-get-repository)
    call gogh#ui#fzf#use()
  " }}}
  endfunction
  " {{{ kyoh86/vim-docbase
  Plug 'kyoh86/vim-docbase', {'dir': $GO_PROJECT_ROOT.'/github.com/kyoh86/vim-docbase'}
  Plug 'kyoh86/vim-metarw-docbase', {'dir': $GO_PROJECT_ROOT.'/github.com/kyoh86/vim-metarw-docbase'}
  function! s:plug.after.kyoh86__vim__docbase()
    call metarw#define_wrapper_commands(v:true)
  endfunction
  " }}}
  " {{{ junegunn/fzf
  let g:fzf_layout = { 'window': {
        \ 'width': 0.6,
        \ 'height': 0.6,
        \ 'border': 'ascii'
        \ } }

  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'

  function! s:plug.after.junegunn__fzf__vim()
    let g:fzf_command_prefix = 'Fzf'
    nnoremap <Leader>f  :<C-u>FzfFiles<CR>
    nnoremap <Leader>c  :<C-u>FzfCommands<CR>
    nnoremap <Leader>w  :<C-u>FzfWindows<CR>
    nnoremap <Leader>bb :<C-u>FzfBuffers<CR>
    nnoremap <Leader>i  :<C-u>FzfHistory<CR>
    nnoremap q:         :<C-u>FzfHistory :<CR>
    nnoremap q/         :<C-u>FzfHistory /<CR>

    function! s:format_buffer(b)
      let l:name = bufname(a:b)
      return printf("%s\t%s", a:b, empty(l:name) ? '[No Name]' : fnamemodify(l:name, ":p:~:."))
    endfunction

    function! s:wipeout_buffers()
      return fzf#run(fzf#wrap({
      \ 'source':  map(
      \   filter(
      \     range(1, bufnr('$')),
      \     {_, nr -> buflisted(nr) && getbufvar(nr, "&filetype") != "qf" && !getbufvar(nr, "&modified")}
      \   ),
      \   {_, nr -> s:format_buffer(nr)}
      \ ),
      \ 'sink*': {lines -> execute('bwipeout '.join(map(lines, {_, line -> split(line)[0]})), '')},
      \ 'options': ['-m', '--tiebreak=index', '--ansi', '-d', '\t', '--prompt', 'Wipeout> ']
      \}))
    endfunction
    nnoremap <silent> <Leader>bw :<C-u>call <SID>wipeout_buffers()<CR>
  endfunction
  " }}}
  Plug 'kyoh86/vim-wipeout', {'on': 'Wipeout', 'dir': $GO_PROJECT_ROOT.'/github.com/kyoh86/vim-wipeout'}
  Plug 'kyoh86/vim-editerm', {'dir': $GO_PROJECT_ROOT.'/github.com/kyoh86/vim-editerm'}
  Plug 'kyoh86/momiji', {'rtp': 'vim', 'dir': $GO_PROJECT_ROOT.'/github.com/kyoh86/momiji'}
  " }}}
call s:plug.end()

" Auto-install plugins {{{
let s:plug.plugs =  get(g:, 'plugs', {})

function! s:plug.is_installed(name)
  return has_key(l:self.plugs, a:name) ? isdirectory(l:self.plugs[a:name].dir) : 0
endfunction

function! s:plug.check_installation()
  if empty(l:self.plugs)
    return
  endif
  let l:list = []
  for [l:name, l:spec] in items(l:self.plugs)
    if !isdirectory(l:spec.dir)
      if has_key(l:spec, 'uri')
        call add(l:list, l:spec.uri)
      endif
    endif
  endfor
  if len(l:list) > 0
    let l:unplugged = map(l:list, 'substitute(v:val, "^.*github\.com/\\(.*/.*\\)\.git$", "\\1", "g")')
    " Ask whether installing plugs like NeoBundle
    echomsg 'Not installed plugs: ' . string(l:unplugged)
    if confirm('Install plugs now?', "yes\nNo", 2) == 1
      PlugInstall
      echo 'Pleaze restart vim'
    endif
  endif
endfunction

augroup CheckPlug
  autocmd!
  autocmd VimEnter * if !argc() | call s:plug.check_installation() | endif
augroup END
" }}}

" }}}

" Functions {{{
" Function: Edit Configurations {{{
let g:config_home = g:xdg_config_home . '/vim'
let g:vimrc_file = g:config_home . '/vimrc'
let g:alacritty_file = g:xdg_config_home . '/alacritty/alacritty.yml'
let g:zshrc_file = g:xdg_config_home . '/zsh/.zshrc'
let g:zshenv_file = g:xdg_config_home . '/zsh/.zshenv'
" if exists('fzf#run')
  command! -nargs=0 Config call fzf#run(fzf#wrap({'source': [
      \ g:xdg_config_home,
      \ g:vimrc_file, 
      \ g:alacritty_file, 
      \ g:zshrc_file,
      \ g:zshenv_file
      \ ]}))
" else
"   function! Config(bang, mods)
"     if a:mods == ''
"       let l:command = 'edit'
"     else
"       let l:command = a:mods + ' split'
"     endif
"     execute l:command . a:bang . ' ' . g:vimrc_file
"   endfunction
"   command! -bang -nargs=0 Config :call Config('<bang>', '<mods>')
" endif
" }}}

" Function: Switch Branch {{{
function! s:git_switch(line)
  let l:branch = get(split(a:line), 1, '')
  exec '!git switch '.l:branch
endfunction

command! SwitchBranch call fzf#run(fzf#wrap({
    \ 'source': "git-branches --color --exclude-current",
    \ 'sink': function('<SID>git_switch'),
    \ }))
nnoremap <Leader>gb :<C-u>SwitchBranch<CR>
" }}}

" Function: Edit Changed Files {{{
function! s:fzf_dirty(bang)
  call fzf#run(fzf#wrap({'source': 'git status --porcelain ' . (a:bang ? '-uall ' : '') . '| grep -ve "^.D" | cut -c4-'}))
endfunction
command! -bang FzfDirty call <SID>fzf_dirty(<bang>v:false)
nnoremap <Leader>gd :<C-u>FzfDirty!<CR>
nnoremap <Leader>gD :<C-u>FzfDirty<CR>
" }}}

" Function: Update Terminal Window Title {{{
function! Tapi_UpdateStatus(bufnum, arglist)
  if len(a:arglist) == 1
    call lightline#update()
  endif
endfunction
" }}}

" Function: What's the highlight on the cursor {{{

function! s:get_syn_id(transparent)
    let synid = synID(line('.'), col('.'), 1)
    return a:transparent ? synIDtrans(synid) : synid
endfunction
function! s:get_syn_name(synid)
    return synIDattr(a:synid, 'name')
endfunction
function! s:get_highlight_info()
    execute "highlight " . s:get_syn_name(s:get_syn_id(0))
    execute "highlight " . s:get_syn_name(s:get_syn_id(1))
endfunction
command! HighlightInfo call s:get_highlight_info()
" }}}

" Function: Quote current filename and content {{{
function! s:quote_file()
  let l:content='<details><summary>' . expand('%:t') . '</summary><pre>'
  let l:lines = getline(0, line("$"))
  for l:l in l:lines
     let l:content .= l:l . "\n"
  endfor
  let @+=l:content
endfunction
command! Quote call s:quote_file()
" }}}

" }}}

" Command aliases {{{
command! Ghf OpenGithubFile
" }}}

" Settings {{{
" Stop All Default Plugins {{{
let g:loaded_gzip              = 1
let g:loaded_tar               = 1
let g:loaded_tarPlugin         = 1
let g:loaded_zip               = 1
let g:loaded_zipPlugin         = 1
let g:loaded_rrhelper          = 1
let g:loaded_2html_plugin      = 1
let g:loaded_vimball           = 1
let g:loaded_vimballPlugin     = 1
let g:loaded_getscript         = 1
let g:loaded_getscriptPlugin   = 1
" }}}

" Colors {{{
syntax enable
set termguicolors
set background=dark
colorscheme momiji
" }}}

" Indents {{{
set tabstop=2
set autoindent
set shiftwidth=2
set expandtab
set nowrap
" }}}

" Displays {{{
set number       " Show the line number
set emoji        " Show emoji characters
set conceallevel=0
set number
" }}}

" Show invisibles {{{
set list
set listchars=tab:»\ ,trail:∙,eol:↵,extends:»,precedes:«,nbsp:∙
" }}}

" Change cursor shape in different modes {{{
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" }}}

" Completion {{{
set wildmenu
set wildmode=longest:full,full
set completeopt=menuone,noinsert,noselect  " set by asyncomplete.vim
" }}}

" Other misc settings {{{
set clipboard=unnamedplus,unnamed
set hidden              " able to edit without saving
set fixendofline        " <EOL> at the end of file will be restored if missing
set showcmd             " 
set textwidth=0         " never limit length of each line
set ambiwidth=double
set foldmethod=marker
set backspace=2
set cursorline   " Highlight cursor line
set showtabline=1
set hlsearch
set incsearch
set t_RV=
highlight Pmenu ctermfg=159 ctermbg=17
" }}}

" Setup Keymaps (for regular functions) {{{
" Delete search highlight
nnoremap <ESC><ESC> :<C-u>nohl<CR><ESC>

" Quickfix
nnoremap <Leader>q :<C-u>copen<CR><ESC>

nnoremap Q <Nop>
nnoremap gQ <Nop>
augroup TermMap
  " ターミナルで
  "   * <C-\><C-n> による job <- -> normal モードの往復を可能にする
  "   * q によるmacro記録を禁止する
  autocmd! TerminalOpen *
      \ nnoremap <buffer> <C-\><C-n> i|
      \ nnoremap <buffer> q <Nop>|
augroup END

nnoremap <silent> tt :<C-u>terminal++curwin ++noclose <CR>
nnoremap <silent> tx :<C-u>terminal++noclose         <CR>
nnoremap <silent> tv :<C-u>vertical terminal++noclose<CR>

" Function: Wipeout Terminal Buffer {{{
" ++nocloseで開くので、exitしたらそのままbuffer wipeoutしたい。
" zshrcの方で function :bw() としてこいつを呼び出してexitするコマンド :bw を定義済
function! Tapi_WipeoutTerminalBuffer(bufnum, arglist)
  autocmd! SafeState <buffer> ++once bwipeout
endfunction

" }}}

" Setup terminal {{{
if executable('/usr/local/bin/zsh')
  set shell=/usr/local/bin/zsh
elseif executable('/usr/bin/zsh')
  set shell=/usr/bin/zsh
endif

augroup TermSetting
  " ターミナルで
  "   * 行番号を表示しない
  "   * wrapする（と、なぜかWrapしなくなる）
  autocmd! TerminalWinOpen *
      \ setlocal nonumber wrap
augroup END
" }}}

" Default Plugins {{{
let g:is_posix = 1
let g:vim_json_conceal = 0
" }}}

" Grep {{{
" auto-open quickfix
autocmd QuickfixCmdPost make,grep,grepadd,vimgrep if len(getqflist()) != 0 | copen | endif
" use rg for grep
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
" }}}

" Auto-off IME {{{
if executable('ibus')
  " IM OFF command
  command! ImeOff silent !ibus engine 'xkb:us::eng'

  " When in insert mode
  augroup InsertHook
      autocmd!
      autocmd InsertLeave * ImeOff
  augroup END
elseif executable('fcitx-remote')
  " IM OFF command
  command! ImeOff silent !fcitx-remote -c

  " When in insert mode
  augroup InsertHook
      autocmd!
      autocmd InsertLeave * ImeOff
  augroup END
endif
" }}}
" }}}

" GVim Settings {{{
set columns=200
set lines=50
set guioptions=cei
set guifont=Cica\ 13.5
set mouse=
set guicursor=n-c:block-Cursor/lCursor,v:block-vCursor,ve:ver35-Cursor,o:hor50-Cursor,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor,sm:block-Cursor,a:blinkwait333-blinkoff333-blinkon333
" }}}
